// NOTE - eventually this file will be automatically updated using a Perl script that understand
// the naming of test case files, functions, and namespaces.

#ifndef _TESTCASES_H
#define _TESTCASES_H

#ifdef __cplusplus
extern "C" {
#endif

// declare C good and bad functions
#ifndef OMITGOOD
	/* BEGIN-AUTOGENERATED-C-GOOD-FUNCTION-DECLARATIONS */
	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_01_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_02_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_03_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_04_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_05_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_06_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_07_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_08_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_09_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_10_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_11_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_12_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_13_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_14_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_15_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_16_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_17_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_18_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_19_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_01_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_02_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_03_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_04_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_05_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_06_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_07_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_08_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_09_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_10_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_11_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_12_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_13_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_14_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_15_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_16_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_17_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_18_good();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_19_good();

	/* END-AUTOGENERATED-C-GOOD-FUNCTION-DECLARATIONS */
#endif // OMITGOOD


#ifndef OMITBAD
	/* BEGIN-AUTOGENERATED-C-BAD-FUNCTION-DECLARATIONS */
	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_01_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_02_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_03_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_04_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_05_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_06_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_07_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_08_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_09_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_10_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_11_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_12_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_13_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_14_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_15_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_16_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_17_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_18_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__always_return_success_19_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_01_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_02_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_03_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_04_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_05_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_06_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_07_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_08_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_09_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_10_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_11_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_12_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_13_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_14_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_15_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_16_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_17_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_18_bad();

	void CWE392_Failure_To_Report_Error_In_Status_Code__fail_to_set_error_code_19_bad();

	/* END-AUTOGENERATED-C-BAD-FUNCTION-DECLARATIONS */
#endif // OMITBAD

#ifdef __cplusplus
} // end extern "C"
#endif

#ifdef __cplusplus
// declare C++ namespaces and good and bad functions

#ifndef OMITGOOD
	/* BEGIN-AUTOGENERATED-CPP-GOOD-FUNCTION-DECLARATIONS */

	/* END-AUTOGENERATED-CPP-GOOD-FUNCTION-DECLARATIONS */
#endif // OMITGOOD


#ifndef OMITBAD
	/* BEGIN-AUTOGENERATED-CPP-BAD-FUNCTION-DECLARATIONS */

	/* END-AUTOGENERATED-CPP-BAD-FUNCTION-DECLARATIONS */
#endif // OMITBAD


#endif // __cplusplus


#endif //  _TESTCASES_H
